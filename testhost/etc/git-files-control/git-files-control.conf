# Monitoring unlinked files and directories - use a semicolon
# without a space to specify multiple files or directories.
# You can add the letter r after the directory colon,
# if you want the directory to be scanned recursively.
# Exemple:
#   UNLINKED_FILES_AND_DIRECTORIES='/etc/git-files-control:r;/etc/test/{recursive:r,non-recursive;}'
UNLINKED_FILES_AND_DIRECTORIES='/etc/git-files-control:r'


# Monitoring repositories - use a semicolon without a space to specify multiple repositories.
# The branch for the repository is indicated in square brackets without a space after the address of the repository.
# You can add, through the "+" sign from the repository,
# a directory or file in the file system that will be linked to this repository- in this case,
# the path to the brace is used to determine the root directory of the repository in your file system
# and model of the purpose of the data by the hostname root directory in this repository be excluded.
# Exemples:
#   REPOSITORIES='https://github.com/kilzhlik/git-files-control.git[master]+/etc/git-files-control/{test:r,two,tree/one:r}'
#   REPOSITORIES='https://github.com/kilzhlik/git-files-control.git[snap]+/etc/git-files-control:r;https://github.com/kilzhlik/git-control.git[develop]+/etc/git-control'
REPOSITORIES='https://github.com/kilZHlik/test-git-files-control-for-unlinked-files.git'


# Pause between repository handling.
# Sets the required timeout between executing “git pull” when reacting to changes in files.
# PROCESSING_TIMEOUT=0


# If you change a large number of files at the same time,
# the queue for checking changes in them may accumulate.
# When the queue for processing changes in files is accumulated,
# this parameter sets its maximum length.
# If the size of this queue is exceeded,
# then the check for changes in the files that are not included in it will not be performed,
# and the corresponding error message will be writed in the log.
# FIFO_QUEUE_LIMIT=1000


# Directory for save repositories data:
DIRECTORY_FOR_REPOSITORIES=/var/lib/git-files-control/git_repositories


# Path to log file:
LOG_FILE_PATH=/var/log/git-files-control.log


# Writing correct updates to log:
LOGGING_CORRECT_FILE_UPDATES=true


# The command executed when the file is updated incorrectly:
# RUN_AFTER_INCORRECT_FILE_UPDATE=


# Auto Restoring files from the repository when manually changing them:
# FILES_AUTO_RECOVERY=false


# User used to access git repositories:
USER_FOR_CONNECT_TO_REPOSITORIES=root


# Broadcast message with manual changes in monitored directories:
# BROADCAST_MESSAGE_WITH_ALARM=true


# Debag mode
# DEBAG_MODE=false

# Exclude the .git directory from processing:
EXCLUDE_GIT_DIRECTORY=true
